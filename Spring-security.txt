Cliennt -> WebSecurityConfig extends WebSecurityConfigererAdapter-> iterate through the List<AuthenticationProvider>-->
and invoke AuthenticationProvider.authenticate() method

WebSecurityConfigererAdapter --> it can have AuthenticationManager/AuthenticationProvider/UserDetailsService (if we dont provide the autowiring in this class for AuthenticationManager then we must have the bean of type AuthenticationManager in the conntainer and container will autometically inject the AuthenticationManager)

1) if the authenticationmanager is to be initialized using @Bean and spring default AuthenticationManager

@Beann
public AuthenticationManager authenticationManagerBean() throws Exception{
	return super.authenticationManagerBean();
}
2) Otherwise we can create our custom AuthenticationManager

@Component
public class MyAuthenticationManager implements AuthenticationManager {

@Autowired
UserService userService;

@Autowired
BcryptPasswordEncoder encoder;

public Authentication authenticate(Authentication auth) throws AuuthenticationException{
	// get principle
	String userName = Optional.ofNullable(auth.getPrincipal()).orElseGet(()-> "").toString();
	String password = Optional.ofNullable(auth.getCredentials()).orElseGet(()-> "").toString();
	UserDetails details = userService.loadUserByName(userName);
	Authentication newAuth = null;
	if(details.getUserName().equalsIgnorecase(userName) && encoder.matches(password, details.getPassword)){
		newAuth = new UserNamePasswordAuthenticationToken(userName,password, details.getAutherities());
	}
	return newAuth;
}
}

and autowired in subclass of WebSecurityConfigererAdapter class like below

@Autowired
MyAuthenticationManager authenticationManager;

OR
@Autowired 
AuthenticationManger authenticationManager;

But in this case there should be a bean of type AuthenticationManger( custome bean), even if we don't provide the @Autowired for authenticationManager, the bean is autometically injected.

3. if you want to use custom authenticationProvider then need to do the following.
a) Create a customAuthenticationProvider like below::

@Component
public class MyAuthenticationProvider implements AuthenticationProvider {

@Autowired
UserService userService;

@Autowired
BcryptPasswordEncoder encoder;

@Override
public Authentication authenticate(Authentication auth) throws AuuthenticationException{
	// get principle
	String userName = Optional.ofNullable(auth.getPrincipal()).orElseGet(()-> "").toString();
	String password = Optional.ofNullable(auth.getCredentials()).orElseGet(()-> "").toString();
	UserDetails details = userService.loadUserByName(userName);
	Authentication newAuth = null;
	if(details.getUserName().equalsIgnorecase(userName) && encoder.matches(password, details.getPassword)){
		newAuth = new UserNamePasswordAuthenticationToken(userName,password, details.getAutherities());
	}
	return newAuth;
}

@Override
public void supports(Class<?> auth ){
	return super.equals(UserNamePasswordAuthenticationToken.class);
}


}

b) Create default AuthenticationManager(ProviderManager) by autowiring in subclass of WebSecurityConfigAdapter like below:

@Beann
public AuthenticationManager authenticationManagerBean() throws Exception{
	return super.authenticationManagerBean();
}
c) Any of the following will work

@Autowired
AuthenticationProvider authenticationProvider

OR

@Autowired
MyAuthenticationProvider authenticationProvider

OR
 do not provide any autowiring.
 
4) you can directly use UserDetailsService by autowiring in sub class  WebSecurityConfigAdapter like below ( in this case spring's default AuthenticationManager(ProviderManager) will be instasiated
and authenticationnMannager will delegate to default AuthenticationProvider(DaoAuthenticationProvider which is subclass of AbstractUserDetailsAuthenticationProvider) and the 
DaoAuthenticationProvider.authenticate(..) will be called.

@Resource (name="userService")
private UserDetailsService userDetailsService;

@Bean
public AuthenticationManager authenticationManagerBean() throws Exception{
return super.authenticationManagerBean();
}


and need to create custom UserDetailsService like below:

@Component
public class MyUserDetailsService implements UserDetailsService {


@Autowired
BcryptPasswordEncoder encoder;

@Override
public UserDetails loadUserByName(String userName) throws UsernameNotFoundException{
	
	if("kkumraat".equals(userName)){
		System.out.println(encoder.encode(userName));
		return new User(userName, enocder.encode("password"), getAuthority(userName))
	}else if("prakpay".equals(userName)){
		System.out.println(encoder.encode(userName));
		return new User(userName, enocder.encode(userName), getAuthority(userName))
	}else{
		throw new UserNotFoundException("User not found"+ userName);
	}
	
	return null;
}

private Set<SimpleGrantedAuthority> getAthority(String userName){
Set<SimpleGrantedAuthority> authorities = new HashSet<>();
	if("kkumraat".equals(userName)){
		//authorities.add(new SimpleGrantAuthority("ROLE_"+ "USER");
		authorities.add(new SimpleGrantAuthority("USER");
		
	}else if("prakpay".equals(userName)){
		//authorities.add(new SimpleGrantAuthority("ROLE_"+ "USER");
		//authorities.add(new SimpleGrantAuthority("ROLE_"+ "ADMIN");
		authorities.add(new SimpleGrantAuthority("USER");
		authorities.add(new SimpleGrantAuthority("ADMIN");
	}
	
	retrn authorities;
}
}

Here authenticationManger is initialized through super.authenticationManagerBean()
Even if you don't provide the autowiring the spring will automatically inject the MyUserDetailsService

=======================================================================================================

1. you can configure authenticationProvider like below

@Override
protected void congigure(AuthenticationManager auth) throws Exception{
auth.authenticationProvider(authenticationProvider);
}

2. you can configure passwordEncoder like below

@Override
protected void congigure(AuthenticationManager auth) throws Exception{
auth.userDetailsService(userDetailsService).passwordEncoder(new BcryptPasswordEncoder());
}

3. WebSecrityConfigurerAdapter.init()--> web.addSecurityFilterChainBuilder(http)--> initialize the filter chain proxy

=================================================================================================================
if yo want to remove the default ROLE_ prefix then use the following in subclass of WebSecrityConfigurerAdapter

@Bean
GrantedAuthorityDefaults getGrantedAuthorityDefaults(){
return new GrantedAuthorityDefaults("");// remove the ROLE_ prefix
}

